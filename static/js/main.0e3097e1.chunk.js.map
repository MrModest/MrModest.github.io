{"version":3,"sources":["components/LanguageSwitcher.module.css","components/Card.module.css","components/Block.module.css","Repository.jsx","components/LanguageSwitcher.jsx","components/Loading.jsx","components/Card.jsx","components/Block.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Repository","langCode","dataRoot","relatedPath","this","logosRoot","Promise","all","axios","get","getStaticDataUrl","staticDatas","en","data","ru","root","process","cx","classNames","bind","styles","LanguageSwitcher","props","className","langCaption","onClick","setLocale","Loading","Spinner","animation","variant","Card","href","link","target","rel","label","src","getLogoFullUrl","logoUrl","alt","name","fullname","responseTime","description","Block","title","cards","map","card","key","App","useState","dataCache","setDataCache","locale","localeData","setLocaleData","useEffect","a","getStaticData","fetchData","navigator","language","userLanguage","toLowerCase","match","header","blocks","block","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e3097e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lang\":\"LanguageSwitcher_lang__9IsUL\",\"lang-switch\":\"LanguageSwitcher_lang-switch__25b-D\",\"en\":\"LanguageSwitcher_en__2KJXD\",\"ru\":\"LanguageSwitcher_ru__2HJlv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"col-md-4\":\"Card_col-md-4__2CsrJ\",\"card\":\"Card_card__3F8np\",\"card-title\":\"Card_card-title__o4pRI\",\"card-body\":\"Card_card-body__1vsqg\",\"card-logo\":\"Card_card-logo__UV-U-\",\"card-content\":\"Card_card-content__1Mgvv\",\"card-activity\":\"Card_card-activity__1EPDJ\",\"card-comment\":\"Card_card-comment__4Dnky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"social\":\"Block_social__3m5fA\"};","import axios from 'axios';\n\nexport default class Repository {\n    static root = process.env.PUBLIC_URL;\n    static dataRoot = Repository.root + '/data';\n    static logosRoot = Repository.dataRoot + '/logos';\n\n    static getStaticDataUrl(langCode){\n        return Repository.dataRoot + '/staticData.' + langCode + '.json';\n    }\n\n    static getLogoFullUrl(relatedPath){\n        return this.logosRoot + relatedPath;\n    }\n\n    static async getStaticData() {\n        const staticDatas = await Promise.all([\n            axios.get(Repository.getStaticDataUrl('en')),\n            axios.get(Repository.getStaticDataUrl('ru'))\n        ]);\n\n        return {\n            en: staticDatas[0].data,\n            ru: staticDatas[1].data,\n        }\n    }\n}","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../global.css';\nimport styles from './LanguageSwitcher.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nexport default function LanguageSwitcher(props) {\n  const setEn = () => props.setLocale('en');\n  const setRu = () => props.setLocale('ru');\n\n  return (\n    <div className={cx('lang', 'col-md-6')}>\n      <div>\n        <h4>{props.langCaption}</h4>\n      </div>\n      <div className={cx('lang-switch', 'en')} onClick={setEn}>English</div>\n      <div className={cx('lang-switch', 'ru')} onClick={setRu}>Русский</div>\n    </div>\n  );\n}","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading() {\n    return (\n        <div>\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </div>\n    );\n}","import React from 'react';\n\nimport Repository from '../Repository';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './Card.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nexport default function Card(props) {\n\n  return (\n    <div className={cx('col-md-4')}>\n      <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <div className={cx('card')}>\n          <div className={cx('card-title')}> {props.label} </div>\n          <div className={cx('card-body')}>\n            <div className={cx('card-logo')}>\n              <img src={Repository.getLogoFullUrl(props.logoUrl)} alt={props.name} />\n            </div>\n            <div className={cx('card-content')}>\n              <div className={cx('card-label')}> {props.fullname} </div>\n              <div className={cx('card-activity')}> {props.responseTime} </div>\n              <div className={cx('card-comment')}> {props.description} </div>\n            </div>\n          </div>\n        </div>\n      </a>\n    </div>\n  );\n}","import React from 'react';\n\nimport Card from './Card';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './Block.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nexport default function Block(props) {\n  return (\n    <div className={cx('social')}>\n      <h1>{props.title}</h1>\n      <div className={cx('row')}>\n          {props.cards.map(card => \n            (<Card key={card.label} {...card} />)\n          )}\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Repository from './Repository'\n\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport Loading from './components/Loading';\nimport Block from './components/Block';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './App.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nfunction App() {\n  const [dataCache, setDataCache] = useState();\n  const [locale, setLocale] = useState('en');\n  const [localeData, setLocaleData] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setDataCache(await Repository.getStaticData());\n    };\n    \n    fetchData();\n\n    const setDefaultLocale = () => {\n      const lang = navigator.language || navigator.userLanguage;\n\n      if (lang.toLowerCase().match('ru') === null) {\n        setLocale('en');\n      } else {\n        setLocale('ru');\n      }\n    };\n\n    setDefaultLocale();\n  }, []);\n\n  useEffect(() => {\n    if (dataCache) { setLocaleData(dataCache[locale]); }\n  }, [dataCache, locale]);\n\n  const onChangeLocale = (langCode) => {\n    setLocale(langCode);\n  };\n\n  return (!localeData) ? <Loading /> : (\n    <div className={cx('wrapper')}>\n      <div className={cx('content', 'container')}>\n        <LanguageSwitcher langCaption = {localeData.header.langCaption} setLocale = {onChangeLocale} />\n        <br /> <hr />\n        {localeData.blocks.map(block => \n          (<Block key={block.title} {...block} />)\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}