{"version":3,"sources":["logo.svg","Repository.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Repository","langCode","dataRoot","Promise","all","axios","get","getStaticDataUrl","staticDatas","en","data","ru","App","useState","setLocale","setData","useEffect","a","navigator","language","userLanguage","toLowerCase","match","getStaticData","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qLCEtBC,E,8GACOC,GAIpB,MAAOC,6BAA4BD,EAAW,U,sKAIpBE,QAAQC,IAAI,CAClCC,IAAMC,IAAIN,EAAWO,iBAAiB,OACtCF,IAAMC,IAAIN,EAAWO,iBAAiB,S,cAFpCC,E,yBAKC,CACHC,GAAID,EAAY,GAAGE,KACnBC,GAAIH,EAAY,GAAGE,O,wGCiBhBE,MA5Bf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACEC,GADF,aAEWD,mBAAS,CAAEJ,GAAI,GAAIE,GAAI,KAFlC,mBAEAI,GAFA,WAqBb,OAjBAC,oBAAS,sBAAC,sBAAAC,EAAA,6DAG+B,QAF1BC,UAAUC,UAAYD,UAAUE,cAEpCC,cAAcC,MAAM,MAC3BR,EAAU,MAEVA,EAAU,MANJ,KASRC,EATQ,SASMf,EAAWuB,gBATjB,6EAUP,IAQD,yBAAKC,UAAU,SCjBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DCZNO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBd,WACrBA,UAAUe,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.789d92f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nexport default class Repository {\n    static getStaticDataUrl(langCode){\n        const root = process.env.PUBLIC_URL;\n        const dataRoot = root + '/data';\n\n        return dataRoot + '/staticData.' + langCode + '.json';\n    }\n\n    static async getStaticData() {\n        const staticDatas = await Promise.all([\n            axios.get(Repository.getStaticDataUrl('en')),\n            axios.get(Repository.getStaticDataUrl('ru'))\n        ]);\n\n        return {\n            en: staticDatas[0].data,\n            ru: staticDatas[1].data,\n        }\n    }\n}","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Repository from './Repository'\n\n\n\nfunction App() {\n  const [locale, setLocale] = useState('en');\n  const [data, setData] = useState({ en: {}, ru: {} })\n\n  useEffect(async () => {\n    const lang = navigator.language || navigator.userLanguage;\n\n    if (lang.toLowerCase().match('ru') === null) {\n      setLocale('en');\n    } else {\n      setLocale('ru');\n    }\n\n    setData(await Repository.getStaticData())\n  }, [])\n\n  const fetchData = async () => {\n    const d = await Repository.getStaticData();\n    setData(d);\n  }    \n\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}