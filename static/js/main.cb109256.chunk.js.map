{"version":3,"sources":["Repository.jsx","components/LanguageSwitcher.jsx","components/Loading.jsx","components/Card.jsx","components/CardEdit.jsx","components/Block.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Repository","langCode","dataRoot","relatedPath","this","logosRoot","Promise","all","axios","get","getStaticDataUrl","staticDatas","en","data","ru","navigator","language","userLanguage","toLowerCase","match","root","process","LanguageSwitcher","props","className","langCaption","onClick","setLocale","Loading","style","paddingLeft","marginTop","backgroundColor","Spinner","animation","variant","Card","href","link","target","rel","label","src","getLogoFullUrl","logoUrl","alt","name","fullname","responseTime","description","CardEdit","type","defaultValue","Block","title","editMode","cards","map","card","key","Footer","App","useState","dataCache","setDataCache","locale","localeData","setLocaleData","setEditMode","useEffect","a","getData","fetchData","defaultLocale","document","Fragment","header","onChange","event","checked","blocks","block","Boolean","window","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb109256.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class Repository {\n  static root = process.env.PUBLIC_URL;\n  static dataRoot = Repository.root + '/data';\n  static logosRoot = Repository.dataRoot + '/logos';\n\n  static getStaticDataUrl(langCode){\n    return Repository.dataRoot + '/staticData.' + langCode + '.json';\n  }\n\n  static getLogoFullUrl(relatedPath){\n    return this.logosRoot + relatedPath;\n  }\n\n  static async getData() {\n    const staticDatas = await Promise.all([\n      axios.get(Repository.getStaticDataUrl('en')),\n      axios.get(Repository.getStaticDataUrl('ru'))\n    ]);\n\n    return {\n      en: staticDatas[0].data,\n      ru: staticDatas[1].data,\n    }\n}\n\n  static get defaultLocale() {\n    const lang = navigator.language || navigator.userLanguage;\n\n    return (lang.toLowerCase().match('ru') === null)\n      ? 'en'\n      : 'ru';\n  }\n}","import React from 'react';\n\nimport '../global.css';\n\nexport default function LanguageSwitcher(props) {\n  const setEn = () => props.setLocale('en');\n  const setRu = () => props.setLocale('ru');\n\n  return (\n    <div className='lang-switcher'>\n      <h2>{props.langCaption}</h2>\n      <button className='lang-switch en' onClick={setEn}>English</button>\n      <button className='lang-switch ru' onClick={setRu}>Русский</button>\n  </div>\n  );\n}","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading() {\n  return (\n    <div style={{ paddingLeft: '50em', marginTop: '10em', backgroundColor: 'grey' }}>\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n      <Spinner animation=\"grow\" variant=\"info\" />\n      <Spinner animation=\"grow\" variant=\"light\" />\n      <Spinner animation=\"grow\" variant=\"dark\" />\n  </div>\n  );\n}","import React from 'react';\n\nimport Repository from '../Repository';\n\nimport '../global.css';\n\nexport default function Card(props) {\n\n  return (\n    <a className='card' href={props.link} target='_blank' rel='noopener noreferrer'>\n      <h4 className='card-title'>{props.label}</h4>\n      <div className='card-body'>\n        <img className='card-logo' src={Repository.getLogoFullUrl(props.logoUrl)} alt={props.name} />\n        <div className='card-content'>\n          <div className='card-label'>{props.fullname}</div>\n          <div className='card-activity'>{props.responseTime}</div>\n          <div className='card-comment'>{props.description}</div>\n        </div>\n      </div>\n    </a>\n  );\n}","import React from 'react';\n\nimport Repository from '../Repository';\n\nimport '../global.css';\n\nexport default function CardEdit(props) {\n\n  return (\n    <div className='card' href={props.link} target='_blank' rel='noopener noreferrer'>\n      <div className='card-title'>\n        <input className='input-edit' type='text' defaultValue={props.label} />\n      </div>\n      <div className='card-body'>\n        <img className='card-logo' src={Repository.getLogoFullUrl(props.logoUrl)} alt={props.name} />\n        <div className='card-content'>\n          <div className='card-label'>\n          <input className='input-edit' type='text' defaultValue={props.fullname} />\n          </div>\n          <div className='card-activity'>\n            <input className='input-edit' type='text' defaultValue={props.responseTime} />\n          </div>\n          <div className='card-comment'>\n            <textarea className='input-edit' defaultValue={props.description} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\nimport Card from './Card';\nimport CardEdit from './CardEdit';\n\nimport '../global.css';\n\nexport default function Block(props) {\n  return (\n    <div className='block'>\n      <h3>{props.title}</h3>\n      <div className='block-container'>\n        {props.editMode\n        ? props.cards.map(card => \n          (<CardEdit key={card.label} {...card} />)\n        )\n        : props.cards.map(card => \n          (<Card key={card.label} {...card} />)\n        )}\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <div className=\"copiright\">\n        Inspired by: &nbsp;\n        <a href=\"https://github.com/Gjmrd/gjmrd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <u>gjmrd.github.io</u>\n        </a>\n        <br />\n        But rewritten with only functional components and hooks.\n      </div>\n    </footer>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Repository from './Repository'\n\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport Loading from './components/Loading';\nimport Block from './components/Block';\nimport Footer from './components/Footer';\n\nimport './global.css';\n\nfunction App() {\n  const [dataCache, setDataCache] = useState();\n  const [locale, setLocale] = useState('en');\n  const [localeData, setLocaleData] = useState();\n  const [editMode, setEditMode] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setDataCache(await Repository.getData());\n    };\n    \n    fetchData();\n\n    setLocale(Repository.defaultLocale);\n\n    document.title = \"MrModest | Contacts\";\n  }, []);\n\n  useEffect(() => {\n    if (dataCache) { setLocaleData(dataCache[locale]); }\n  }, [dataCache, locale]);\n\n  const onChangeLocale = locale => setLocale(locale);\n\n  const onEditModeChange = event => setEditMode(event.target.checked);\n\n  return (!localeData) ? <Loading /> : (\n    <React.Fragment>\n      <header>\n        <LanguageSwitcher langCaption = {localeData.header.langCaption} setLocale = {onChangeLocale} />\n        <input type='checkbox' onChange={onEditModeChange} />\n      </header>\n      <hr />\n      <div className='container'>\n        {localeData.blocks.map(block => \n          (<Block key={block.title} editMode={editMode} {...block} />)\n        )}\n      </div>\n      <hr />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}