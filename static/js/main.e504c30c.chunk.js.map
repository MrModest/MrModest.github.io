{"version":3,"sources":["api.js","actions/card.js","actions/block.js","actions/profile.js","actions/language.js","components/LanguageSwitcher.jsx","components/Loading.jsx","components/Card.jsx","components/Block.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","reducers/index.js","reducers/cardReducer.js","reducers/blockReducer.js","reducers/profileReducer.js","reducers/languageReducer.js","store/index.js","index.js"],"names":["dataUrl","rootUrl","getCards","a","axios","get","resp","status","Error","data","getBlocks","getProfile","api","then","cards","type","blocks","profiles","setDefaultLanguage","setLanguage","navigator","language","userLanguage","toLowerCase","match","LanguageSwitcher","dispatch","useDispatch","caption","useSelector","state","className","onClick","Loading","style","paddingLeft","marginTop","backgroundColor","Spinner","animation","variant","Card","logoName","label","logo","fullname","responseTime","link","description","href","target","rel","src","alt","Block","id","title","selectCards","createSelector","filter","c","blockId","map","card","key","Footer","App","useEffect","fetchBlocks","fetchCards","fetchProfiles","document","selectBlocks","b","Fragment","block","Boolean","window","location","hostname","reducer","combineReducers","action","cardId","p","profile","store","createStore","applyMiddleware","promise","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e504c30c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const langCodes = { ru: 'ru', en: 'en' }\n\nexport const rootUrl = process.env.PUBLIC_URL;\nexport const dataUrl = rootUrl + '/data';\nexport const logosUrl = dataUrl + '/logos';\n\nexport async function getL10n(lang) {\n  var resp = await axios.get(`${dataUrl}/l10n.${lang}.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load l10n!\");\n  }\n  return resp.data;\n}\n\nexport async function getCards() {\n  var resp = await axios.get(`${dataUrl}/cards.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load cards\");\n  }\n  return resp.data;\n}\n\nexport async function getBlocks() {\n  var resp = await axios.get(`${dataUrl}/blocks.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load blocks\");\n  }\n  return resp.data;\n}\n\nexport async function getProfile() {\n  var resp = await axios.get(`${dataUrl}/profiles.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load profile\");\n  }\n  return resp.data;\n}\n\nexport function getLogoUrl(logoName) {\n  return `${logosUrl}/${logoName}`;\n}\n\nexport function getDefaultLanguage() {\n  const lang = navigator.language || navigator.userLanguage;\n\n  return (lang.toLowerCase().match('ru') === null)\n    ? 'en'\n    : 'ru';\n}","import * as api from '../api';\n\nexport const FETCH_CARDS = 'FETCH_CARDS';\nexport const ADD_CARD = 'ADD_CARD';\nexport const EDIT_CARD = 'EDIT_CARD';\nexport const DELETE_CARD = 'DELETE_CARD';\n\nexport async function fetchCards() {\n  return api.getCards()\n    .then(cards => ({\n      type: FETCH_CARDS,\n      cards\n    }));\n}\n\nexport function addCard(card) {\n  return {\n    type: ADD_CARD,\n    card\n  };\n}\n\nexport function editCard(card) {\n  return {\n    type: EDIT_CARD,\n    card\n  };\n}\n\nexport function deleteCard(cardId) {\n  return {\n    type: DELETE_CARD,\n    cardId\n  };\n}","import * as api from '../api';\n\nexport const FETCH_BLOCKS = 'FETCH_BLOCKS';\nexport const ADD_BLOCK = 'ADD_BLOCK';\nexport const EDIT_BLOCK = 'EDIT_BLOCK';\nexport const DELETE_BLOCK = 'DELETE_BLOCK';\n\nexport async function fetchBlocks() {\n  return api.getBlocks()\n    .then(blocks => ({\n      type: FETCH_BLOCKS,\n      blocks\n    }));\n}\n\nexport function addBlock(block) {\n  return {\n    type: ADD_BLOCK,\n    block\n  };\n}\n\nexport function editBlock(block) {\n  return {\n    type: EDIT_BLOCK,\n    block\n  };\n}\n\nexport function deleteBlock(blockId) {\n  return {\n    type: DELETE_BLOCK,\n    blockId\n  };\n}","import * as api from '../api';\n\nexport const FETCH_PROFILES = 'FETCH_PROFILES';\nexport const EDIT_PROFILE = 'EDIT_PROFILE';\n\nexport async function fetchProfiles() {\n  return api.getProfile()\n    .then(profiles => ({\n      type: FETCH_PROFILES,\n      profiles\n    }));\n}\n\nexport function editProfile(profile) {\n  return {\n    type: EDIT_PROFILE,\n    profile\n  };\n}","export const SET_LANGUAGE = 'SET_LANGUAGE';\n\nfunction getDefaultLanguage() {\n  const lang = navigator.language || navigator.userLanguage;\n\n  return (lang.toLowerCase().match('ru') === null)\n    ? 'en'\n    : 'ru';\n}\n\nexport function setDefaultLanguage() {\n  return setLanguage(\n    getDefaultLanguage()\n  );\n}\n\nexport function setLanguage(language) {\n  return ({\n    type: SET_LANGUAGE,\n    language\n  });\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setLanguage } from '../actions'\n\nimport '../global.css';\n\nconst LanguageSwitcher = () => {\n  const dispatch = useDispatch();\n\n  const setEn = () => dispatch(setLanguage('en'));\n  const setRu = () => dispatch(setLanguage('ru'));\n\n  const caption = useSelector(state => state.language) === 'en' ? 'Language' : 'Язык';\n\n  return (\n    <div className='lang-switcher'>\n      <h2>{caption}</h2>\n      <button className='lang-switch en' onClick={setEn}>English</button>\n      <button className='lang-switch ru' onClick={setRu}>Русский</button>\n    </div>\n  )\n};\n\nexport default LanguageSwitcher;","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading() {\n  return (\n    <div style={{ paddingLeft: '50em', marginTop: '10em', backgroundColor: 'grey' }}>\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n      <Spinner animation=\"grow\" variant=\"info\" />\n      <Spinner animation=\"grow\" variant=\"light\" />\n      <Spinner animation=\"grow\" variant=\"dark\" />\n  </div>\n  );\n}","import React from 'react';\n\nimport * as api from '../api.js';\n\nimport '../global.css';\n\nconst Card = ({ label, logo, fullname, responseTime, link, description }) => {\n  return (\n    <a className='card' href={link} target='_blank' rel='noopener noreferrer'>\n      <h4 className='card-title'>{label}</h4>\n      <div className='card-body'>\n        <img className='card-logo' src={api.getLogoUrl(logo)} alt={label} />\n        <div className='card-content'>\n          <div className='card-label'>{fullname}</div>\n          <div className='card-activity'>{responseTime}</div>\n          <div className='card-comment'>{description}</div>\n        </div>\n      </div>\n    </a>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport { createSelector } from 'reselect';\n\nimport Card from './Card';\n\nimport '../global.css';\nimport { useSelector } from 'react-redux';\n\nconst Block = ({ id, title }) => {\n  const selectCards = createSelector(\n    state => state.cards,\n    state => state.language,\n    (cards, language) => cards.filter(c => c.language === language && c.blockId === id)\n  );\n\n  const cards = useSelector(selectCards);\n\n  return (\n    <div className='block'>\n      <h3>{title}</h3>\n      <div className='block-container'>\n        {cards.map(card => \n          (<Card key={card.id} {...card} />)\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Block;","import React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <div className=\"copiright\">\n        Inspired by: &nbsp;\n        <a href=\"https://github.com/Gjmrd/gjmrd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <u>gjmrd.github.io</u>\n        </a>\n        <br />\n        But rewritten with only functional components and hooks.\n      </div>\n    </footer>\n  );\n}","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport Loading from './components/Loading';\nimport Block from './components/Block';\nimport Footer from './components/Footer';\n\nimport './global.css';\n\nimport { setDefaultLanguage, fetchBlocks, fetchCards, fetchProfiles } from './actions';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchBlocks());\n    dispatch(fetchCards());\n    dispatch(fetchProfiles());\n\n    dispatch(setDefaultLanguage());\n\n    document.title = \"MrModest | Contacts\";\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const selectBlocks = createSelector(\n    state => state.blocks,\n    state => state.language,\n    (blocks, language) => blocks.filter(b => b.language === language)\n  );\n\n  const blocks = useSelector(selectBlocks);\n\n  return (!blocks) ? <Loading /> : (\n    <React.Fragment>\n      <header>\n        <LanguageSwitcher />\n      </header>\n      <hr />\n      <div className='container'>\n        {blocks.map(block => \n          (<Block key={block.id} {...block} />)\n        )}\n      </div>\n      <hr />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport cards from './cardReducer';\nimport blocks from './blockReducer';\nimport profiles from './profileReducer';\nimport language from './languageReducer';\n\nconst reducer = combineReducers({\n  cards,\n  blocks,\n  profiles,\n  language\n});\n\nexport default reducer;","import { FETCH_CARDS, ADD_CARD, EDIT_CARD, DELETE_CARD } from '../actions';\n\nexport default function cardReducer(state = [], action){\n  switch (action.type) {\n    case FETCH_CARDS:\n      return action.cards;\n\n    case ADD_CARD:\n      return [...state, action.card];\n\n    case EDIT_CARD:\n      return [...state.filter(c => c.id !== action.card.id), action.card];\n\n    case DELETE_CARD:\n      return state.filter(c => c.id !== action.cardId);\n\n    default:\n      return state;\n  }\n}","import { FETCH_BLOCKS, ADD_BLOCK, EDIT_BLOCK, DELETE_BLOCK } from '../actions';\n\nexport default function cardReducer(state = [], action){\n  switch (action.type) {\n    case FETCH_BLOCKS:\n      return action.blocks;\n\n    case ADD_BLOCK:\n      return [...state, action.block];\n\n    case EDIT_BLOCK:\n      return [...state.filter(c => c.id !== action.block.id), action.block];\n\n    case DELETE_BLOCK:\n      return state.filter(c => c.id !== action.blockId);\n\n    default:\n      return state;\n  }\n}","import { FETCH_PROFILES, EDIT_PROFILE } from '../actions';\n\nexport default function profileReducer(state = [], action){\n  switch (action.type) {\n    case FETCH_PROFILES:\n      return action.profiles;\n\n    case EDIT_PROFILE:\n      return [\n        ...state.filter(p => p.language !== action.profile.language), \n        action.profile\n      ];\n\n    default:\n      return state;\n  }\n}","import { SET_LANGUAGE } from '../actions';\n\nexport default function languageReducer(state = '', action){\n  switch (action.type) {\n    case SET_LANGUAGE:\n      return action.language;\n\n    default:\n      return state;\n  }\n}","import { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, applyMiddleware(promise));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}