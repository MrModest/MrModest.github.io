{"version":3,"sources":["Repository.jsx","components/LanguageSwitcher.jsx","components/Loading.jsx","components/Card.jsx","components/Block.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Repository","langCode","dataRoot","relatedPath","this","logosRoot","Promise","all","axios","get","getStaticDataUrl","staticDatas","en","data","ru","root","process","LanguageSwitcher","props","className","langCaption","onClick","setLocale","Loading","style","paddingLeft","marginTop","backgroundColor","Spinner","animation","variant","Card","href","link","target","rel","label","src","getLogoFullUrl","logoUrl","alt","name","fullname","responseTime","description","Block","title","cards","map","card","key","Footer","App","useState","dataCache","setDataCache","locale","localeData","setLocaleData","useEffect","a","getStaticData","fetchData","navigator","language","userLanguage","toLowerCase","match","document","header","blocks","block","Boolean","window","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ee01d76.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class Repository {\n    static root = process.env.PUBLIC_URL;\n    static dataRoot = Repository.root + '/data';\n    static logosRoot = Repository.dataRoot + '/logos';\n\n    static getStaticDataUrl(langCode){\n        return Repository.dataRoot + '/staticData.' + langCode + '.json';\n    }\n\n    static getLogoFullUrl(relatedPath){\n        return this.logosRoot + relatedPath;\n    }\n\n    static async getStaticData() {\n        const staticDatas = await Promise.all([\n            axios.get(Repository.getStaticDataUrl('en')),\n            axios.get(Repository.getStaticDataUrl('ru'))\n        ]);\n\n        return {\n            en: staticDatas[0].data,\n            ru: staticDatas[1].data,\n        }\n    }\n}","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../global.css';\n\nexport default function LanguageSwitcher(props) {\n  const setEn = () => props.setLocale('en');\n  const setRu = () => props.setLocale('ru');\n\n  return (\n    <div className='lang col-md-6'>\n      <div>\n        <h4>{props.langCaption}</h4>\n      </div>\n      <div className='lang-switch en' onClick={setEn}>English</div>\n      <div className='lang-switch ru' onClick={setRu}>Русский</div>\n    </div>\n  );\n}","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading() {\n  return (\n    <div style={{ paddingLeft: '50em', marginTop: '10em', backgroundColor: 'grey' }}>\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n      <Spinner animation=\"grow\" variant=\"info\" />\n      <Spinner animation=\"grow\" variant=\"light\" />\n      <Spinner animation=\"grow\" variant=\"dark\" />\n  </div>\n  );\n}","import React from 'react';\n\nimport Repository from '../Repository';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../global.css';\n\nexport default function Card(props) {\n\n  return (\n    <div className='col-md-4'>\n      <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <div className='card'>\n          <div className='card-title'> {props.label} </div>\n          <div className='card-body'>\n            <div className='card-logo'>\n              <img src={Repository.getLogoFullUrl(props.logoUrl)} alt={props.name} />\n            </div>\n            <div className='card-content'>\n              <div className='card-label'> {props.fullname} </div>\n              <div className='card-activity'> {props.responseTime} </div>\n              <div className='card-comment'> {props.description} </div>\n            </div>\n          </div>\n        </div>\n      </a>\n    </div>\n  );\n}","import React from 'react';\n\nimport Card from './Card';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../global.css';\n\nexport default function Block(props) {\n  return (\n    <div className='social'>\n      <h1>{props.title}</h1>\n      <div className='row'>\n          {props.cards.map(card => \n            (<Card key={card.label} {...card} />)\n          )}\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <div className=\"container\">\n        <div className=\"authors\">\n          Inspired by: &nbsp;\n          <a href=\"https://github.com/Gjmrd/gjmrd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <u>gjmrd.github.io</u>\n          </a>\n          <br />\n          But rewritten with only functional components and hooks.\n        </div>\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Repository from './Repository'\n\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport Loading from './components/Loading';\nimport Block from './components/Block';\nimport Footer from './components/Footer';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './global.css';\n\nfunction App() {\n  const [dataCache, setDataCache] = useState();\n  const [locale, setLocale] = useState('en');\n  const [localeData, setLocaleData] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setDataCache(await Repository.getStaticData());\n    };\n    \n    fetchData();\n\n    const getDefaultLocale = () => {\n      const lang = navigator.language || navigator.userLanguage;\n\n      return (lang.toLowerCase().match('ru') === null)\n        ? 'en'\n        : 'ru';\n    };\n\n    setLocale(getDefaultLocale());\n\n    document.title = \"MrModest | Contacts\";\n  }, []);\n\n  useEffect(() => {\n    if (dataCache) { setLocaleData(dataCache[locale]); }\n  }, [dataCache, locale]);\n\n  const onChangeLocale = locale => setLocale(locale);\n\n  return (!localeData) ? <Loading /> : (\n    <div className='wrapper'>\n      <div className='content container'>\n        <LanguageSwitcher langCaption = {localeData.header.langCaption} setLocale = {onChangeLocale} />\n        <br /> <hr />\n        {localeData.blocks.map(block => \n          (<Block key={block.title} {...block} />)\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}