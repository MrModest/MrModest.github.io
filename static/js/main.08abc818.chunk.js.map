{"version":3,"sources":["components/LanguageSwitcher.module.css","components/CardView.module.css","components/Block.module.css","components/Footer.module.css","App.module.css","serviceWorker.js","api.ts","actions/card.ts","actions/block.ts","actions/profile.ts","actions/language.ts","actions/localisation.ts","reducers/index.ts","reducers/cardReducer.ts","reducers/blockReducer.ts","reducers/profileReducer.ts","reducers/languageReducer.ts","reducers/localisationReducer.ts","store/index.ts","components/LanguageSwitcher.tsx","components/Loading.tsx","components/CardView.tsx","components/Block.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","dataUrl","getCards","a","axios","get","resp","status","Error","data","getBlocks","getProfiles","FETCH_CARDS","ADD_CARD","EDIT_CARD","DELETE_CARD","api","then","cards","type","payload","FETCH_BLOCKS","ADD_BLOCK","EDIT_BLOCK","DELETE_BLOCK","blocks","FETCH_PROFILES","EDIT_PROFILE","profiles","SET_LANGUAGE","setDefaultLanguage","setLanguage","navigator","language","userLanguage","toLowerCase","FETCH_LOCALISATION","reducer","combineReducers","state","action","filter","c","id","p","localisation","store","createStore","applyMiddleware","promise","cx","classNames","bind","styles","LanguageSwitcher","dispatch","useDispatch","caption","useSelector","className","onClick","Loading","style","paddingLeft","marginTop","backgroundColor","Spinner","animation","variant","CardView","logoName","label","logo","fullname","responseTime","link","description","href","target","rel","src","alt","BlockComponent","title","useMemo","blockId","createSelector","map","card","key","Footer","selectBlocks","b","App","useEffect","fetchBlocks","fetchCards","fetchProfiles","document","Fragment","block","Block","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08abc818.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lang-switcher\":\"LanguageSwitcher_lang-switcher__Vmanb\",\"lang-switch\":\"LanguageSwitcher_lang-switch__25b-D\",\"en\":\"LanguageSwitcher_en__2KJXD\",\"ru\":\"LanguageSwitcher_ru__2HJlv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardView_card__FIu_P\",\"card-title\":\"CardView_card-title__1OwXB\",\"card-logo\":\"CardView_card-logo__285-d\",\"card-activity\":\"CardView_card-activity__X7iYb\",\"card-comment\":\"CardView_card-comment__1Dkc2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__Gscjm\",\"block-container\":\"Block_block-container__3_NDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copiright\":\"Footer_copiright__3D_Ga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nimport Localisation from './entities/Localisation';\nimport Card from './entities/Card';\nimport Block from './entities/Block';\nimport Profile from './entities/Profile';\n\n\nexport const langCodes = { ru: 'ru', en: 'en' }\n\nexport const rootUrl = process.env.PUBLIC_URL;\nexport const dataUrl = rootUrl + '/data';\nexport const logosUrl = dataUrl + '/logos';\n\nexport async function getLocalisation(): Promise<Localisation> {\n  var resp = await axios.get(`${dataUrl}/localisation.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load localisation!\");\n  }\n  return resp.data;\n}\n\nexport async function getCards(): Promise<Card[]> {\n  var resp = await axios.get(`${dataUrl}/cards.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load cards\");\n  }\n  return resp.data;\n}\n\nexport async function getBlocks(): Promise<Block[]> {\n  var resp = await axios.get(`${dataUrl}/blocks.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load blocks\");\n  }\n  return resp.data;\n}\n\nexport async function getProfiles(): Promise<Profile[]> {\n  var resp = await axios.get(`${dataUrl}/profiles.json`)\n  if (resp.status !== 200) {\n    throw new Error(\"Can't load profile\");\n  }\n  return resp.data;\n}\n\nexport function getLogoUrl(logoName: string): string {\n  return `${logosUrl}/${logoName}`;\n}\n\nexport function getDefaultLanguage(): string {\n  const lang = navigator.language || navigator.userLanguage;\n\n  return (lang.toLowerCase().match('ru') === null)\n    ? 'en'\n    : 'ru';\n}","import * as api from '../api';\nimport Card from '../entities/Card';\n\nexport const FETCH_CARDS = 'FETCH_CARDS';\nexport const ADD_CARD = 'ADD_CARD';\nexport const EDIT_CARD = 'EDIT_CARD';\nexport const DELETE_CARD = 'DELETE_CARD';\n\n\ninterface FetchCardsAction {\n  type: typeof FETCH_CARDS;\n  payload: Card[];\n}\n\ninterface AddCardsAction {\n  type: typeof ADD_CARD;\n  payload: Card;\n}\n\ninterface EditCardsAction {\n  type: typeof EDIT_CARD;\n  payload: Card;\n}\n\ninterface DeleteCardsAction {\n  type: typeof DELETE_CARD;\n  payload: number;\n}\n\nexport type CardActionTypes = FetchCardsAction | AddCardsAction | EditCardsAction | DeleteCardsAction;\n\n\nexport async function fetchCards(): Promise<CardActionTypes> {\n  return api.getCards()\n    .then(cards => ({\n      type: FETCH_CARDS,\n      payload: cards\n    }));\n}\n\nexport function addCard(card: Card): CardActionTypes {\n  return {\n    type: ADD_CARD,\n    payload: card\n  };\n}\n\nexport function editCard(card: Card): CardActionTypes {\n  return {\n    type: EDIT_CARD,\n    payload: card\n  };\n}\n\nexport function deleteCard(cardId: number): CardActionTypes {\n  return {\n    type: DELETE_CARD,\n    payload: cardId\n  };\n}","import * as api from '../api';\nimport Block from '../entities/Block';\n\nexport const FETCH_BLOCKS = 'FETCH_BLOCKS';\nexport const ADD_BLOCK = 'ADD_BLOCK';\nexport const EDIT_BLOCK = 'EDIT_BLOCK';\nexport const DELETE_BLOCK = 'DELETE_BLOCK';\n\n\ninterface FetchBlocksAction {\n  type: typeof FETCH_BLOCKS;\n  payload: Block[];\n}\n\ninterface AddBlockAction {\n  type: typeof ADD_BLOCK;\n  payload: Block;\n}\n\ninterface EditBlockAction {\n  type: typeof EDIT_BLOCK;\n  payload: Block;\n}\n\ninterface DeleteBlockAction {\n  type: typeof DELETE_BLOCK;\n  payload: number;\n}\n\nexport type BlockActionTypes = FetchBlocksAction | AddBlockAction | EditBlockAction | DeleteBlockAction;\n\n\nexport async function fetchBlocks(): Promise<BlockActionTypes> {\n  return api.getBlocks()\n    .then(blocks => ({\n      type: FETCH_BLOCKS,\n      payload: blocks\n    }));\n}\n\nexport function addBlock(block: Block): BlockActionTypes {\n  return {\n    type: ADD_BLOCK,\n    payload: block\n  };\n}\n\nexport function editBlock(block: Block): BlockActionTypes {\n  return {\n    type: EDIT_BLOCK,\n    payload: block\n  };\n}\n\nexport function deleteBlock(blockId: number): BlockActionTypes {\n  return {\n    type: DELETE_BLOCK,\n    payload: blockId\n  };\n}","import * as api from '../api';\nimport Profile from '../entities/Profile';\n\nexport const FETCH_PROFILES = 'FETCH_PROFILES';\nexport const EDIT_PROFILE = 'EDIT_PROFILE';\n\n\ninterface FetchProfilesAction {\n  type: typeof FETCH_PROFILES;\n  payload: Profile[];\n}\n\ninterface EditProfileAction {\n  type: typeof EDIT_PROFILE;\n  payload: Profile;\n}\n\nexport type ProfileActionType = FetchProfilesAction | EditProfileAction;\n\n\nexport async function fetchProfiles(): Promise<ProfileActionType> {\n  return api.getProfiles()\n    .then(profiles => ({\n      type: FETCH_PROFILES,\n      payload: profiles\n    }));\n}\n\nexport function editProfile(profile: Profile): ProfileActionType {\n  return {\n    type: EDIT_PROFILE,\n    payload: profile\n  };\n}","export const SET_LANGUAGE = 'SET_LANGUAGE';\n\n\ninterface SetLanguageAction {\n  type: typeof SET_LANGUAGE;\n  payload: string;\n}\n\nexport type LanguageTypeActions = SetLanguageAction;\n\n\nfunction getDefaultLanguage(): string {\n  const lang = navigator.language || navigator.userLanguage;\n\n  return (lang.toLowerCase().match('ru') === null)\n    ? 'en'\n    : 'ru';\n}\n\nexport function setDefaultLanguage(): SetLanguageAction {\n  return setLanguage(\n    getDefaultLanguage()\n  );\n}\n\nexport function setLanguage(language: string): SetLanguageAction {\n  return ({\n    type: SET_LANGUAGE,\n    payload: language\n  });\n}","import * as api from '../api';\n\nimport Localisation from \"../entities/Localisation\";\n\nexport const FETCH_LOCALISATION = 'FETCH_LOCALISATION';\n\n\ninterface FetchLocalisationAction {\n  type: typeof FETCH_LOCALISATION;\n  payload: Localisation;\n}\n\nexport type LocalisationLocalisationTypes = FetchLocalisationAction;\n\n\nexport async function fetchLcalisation(): Promise<LocalisationLocalisationTypes> {\n  return api.getLocalisation()\n    .then(localisation => ({\n      type: FETCH_LOCALISATION,\n      payload: localisation\n    }));\n}","import { combineReducers } from 'redux';\n\nimport cards from './cardReducer';\nimport blocks from './blockReducer';\nimport profiles from './profileReducer';\nimport language from './languageReducer';\nimport localisation from './localisationReducer';\n\nconst reducer = combineReducers({\n  cards,\n  blocks,\n  profiles,\n  language,\n  localisation\n});\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default reducer;","import { FETCH_CARDS, ADD_CARD, EDIT_CARD, DELETE_CARD, CardActionTypes } from '../actions';\nimport Card from '../entities/Card';\n\nexport default function cardReducer(state: Card[] = [], action: CardActionTypes){\n  switch (action.type) {\n    case FETCH_CARDS:\n      return action.payload;\n\n    case ADD_CARD:\n      return [...state, action.payload];\n\n    case EDIT_CARD:\n      return [...state.filter(c => c.id !== action.payload.id), action.payload];\n\n    case DELETE_CARD:\n      return state.filter(c => c.id !== action.payload);\n\n    default:\n      return state;\n  }\n}","import { FETCH_BLOCKS, ADD_BLOCK, EDIT_BLOCK, DELETE_BLOCK, BlockActionTypes } from '../actions';\nimport Block from '../entities/Block';\n\nexport default function blockReducer(state: Block[] = [], action: BlockActionTypes) {\n  switch (action.type) {\n    case FETCH_BLOCKS:\n      return action.payload;\n\n    case ADD_BLOCK:\n      return [...state, action.payload];\n\n    case EDIT_BLOCK:\n      return [...state.filter(c => c.id !== action.payload.id), action.payload];\n\n    case DELETE_BLOCK:\n      return state.filter(c => c.id !== action.payload);\n\n    default:\n      return state;\n  }\n}","import { FETCH_PROFILES, EDIT_PROFILE, ProfileActionType } from '../actions';\nimport Profile from '../entities/Profile';\n\nexport default function profileReducer(state: Profile[] = [], action: ProfileActionType){\n  switch (action.type) {\n    case FETCH_PROFILES:\n      return action.payload;\n\n    case EDIT_PROFILE:\n      return [\n        ...state.filter(p => p.language !== action.payload.language), \n        action.payload\n      ];\n\n    default:\n      return state;\n  }\n}","import { SET_LANGUAGE, LanguageTypeActions } from '../actions';\n\nexport default function languageReducer(state: string = '', action: LanguageTypeActions){\n  switch (action.type) {\n    case SET_LANGUAGE:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}","import { FETCH_LOCALISATION, LocalisationLocalisationTypes } from '../actions';\nimport Block from '../entities/Block';\n\nexport default function blockReducer(state: Block[] = [], action: LocalisationLocalisationTypes) {\n  switch (action.type) {\n    case FETCH_LOCALISATION:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}","import { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, applyMiddleware(promise));\n\nexport default store;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setLanguage } from '../actions'\n\nimport { RootState } from '../reducers';\n\nimport styles from './LanguageSwitcher.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nconst LanguageSwitcher = () => {\n  const dispatch = useDispatch();\n\n  const setEn = () => dispatch(setLanguage('en'));\n  const setRu = () => dispatch(setLanguage('ru'));\n\n  const caption = useSelector<RootState>(state => state.language) === 'en' ? 'Language' : 'Язык';\n\n  return (\n    <div className={cx('lang-switcher')}>\n      <h2>{caption}</h2>\n      <button className={cx('lang-switch', 'en')} onClick={setEn}>English</button>\n      <button className={cx('lang-switch' ,'ru')} onClick={setRu}>Русский</button>\n    </div>\n  )\n};\n\nexport default LanguageSwitcher;","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading() {\n  return (\n    <div style={{ paddingLeft: '50em', marginTop: '10em', backgroundColor: 'grey' }}>\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n      <Spinner animation=\"grow\" variant=\"info\" />\n      <Spinner animation=\"grow\" variant=\"light\" />\n      <Spinner animation=\"grow\" variant=\"dark\" />\n  </div>\n  );\n}","import React from 'react';\n\nimport * as api from '../api';\n\nimport Card from '../entities/Card';\n\nimport styles from './CardView.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nconst CardView = ({ label, logo, fullname, responseTime, link, description }: Card) => {\n  return (\n    <a className={cx('card')} href={link} target='_blank' rel='noopener noreferrer'>\n      <h4 className={cx('card-title')}>{label}</h4>\n      <div className={cx('card-body')}>\n        <img className={cx('card-logo')} src={api.getLogoUrl(logo)} alt={label} />\n        <div className={cx('card-content')}>\n          <div className={cx('card-label')}>{fullname}</div>\n          <div className={cx('card-activity')}>{responseTime}</div>\n          <div className={cx('card-comment')}>{description}</div>\n        </div>\n      </div>\n    </a>\n  );\n}\n\nexport default CardView;","import React, { useMemo } from 'react';\nimport { createSelector } from 'reselect';\n\nimport CardView from './CardView';\n\nimport { useSelector } from 'react-redux';\nimport Block from '../entities/Block';\nimport { RootState } from '../reducers';\n\nimport styles from './Block.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nconst selectCardsByBlockId = (blockId: number) => \n  createSelector(\n    (state: RootState) => state.cards,\n    state => state.language,\n    (cards, language) => cards.filter(c => c.language === language && c.blockId === blockId)\n  );\n\nconst BlockComponent = ({ id, title }: Block) => {\n  const cards = useSelector(\n    useMemo(() => selectCardsByBlockId(id), [id])\n  );\n\n  return (\n    <div className={cx('block')}>\n      <h3>{title}</h3>\n      <div className={cx('block-container')}>\n        {cards.map(card => \n          (<CardView key={card.id} {...card} />)\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default BlockComponent;\n","import React from 'react';\n\nimport styles from './Footer.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nexport default function Footer() {\n  return (\n    <footer>\n      <div className={cx('copiright')}>\n        Inspired by: &nbsp;\n        <a href=\"https://github.com/Gjmrd/gjmrd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <u>gjmrd.github.io</u>\n        </a>\n        <br />\n        But rewritten with only functional components and hooks.\n      </div>\n    </footer>\n  );\n}","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport Loading from './components/Loading';\nimport Block from './components/Block';\nimport Footer from './components/Footer';\n\nimport { setDefaultLanguage, fetchBlocks, fetchCards, fetchProfiles } from './actions';\nimport { RootState } from './reducers';\n\nimport styles from './App.module.css';\nimport classNames from 'classnames/bind';\nconst cx = classNames.bind(styles);\n\nconst selectBlocks = createSelector(\n  (state: RootState) => state.blocks,\n  state => state.language,\n  (blocks, language) => blocks.filter(b => b.language === language)\n);\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchBlocks());\n    dispatch(fetchCards());\n    dispatch(fetchProfiles());\n\n    dispatch(setDefaultLanguage());\n\n    document.title = \"MrModest | Contacts\";\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const blocks = useSelector(selectBlocks);\n\n  return (!blocks) ? <Loading /> : (\n    <React.Fragment>\n      <header>\n        <LanguageSwitcher />\n      </header>\n      <hr />\n      <div className={cx('container')}>\n        {blocks.map(block => \n          (<Block key={block.id} {...block} />)\n        )}\n      </div>\n      <hr />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nimport App from './App';\n\nimport './styles.global.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}